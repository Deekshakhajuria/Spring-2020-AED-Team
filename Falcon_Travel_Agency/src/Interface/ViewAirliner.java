/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Airplane;
import Business.Airliner;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author moury
 */
public class ViewAirliner extends javax.swing.JPanel {

    /**
     * Creates new form ViewAirliner
     */
    private Airliner airlineDirectory;
    private JPanel displayPanel;
    private String mode;
    private Airplane updatedInfo;

    public ViewAirliner(Airliner airlineDirectory, JPanel displayPanel) {
        initComponents();
        this.airlineDirectory = airlineDirectory;
        this.displayPanel = displayPanel;
        populateTable();
        enableFields(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn = new javax.swing.JButton();
        searchAirplaneTxtField = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        airplaneTbl = new javax.swing.JTable();
        viewAirplaneBtn = new javax.swing.JButton();
        deleteAirplaneBtn = new javax.swing.JButton();
        newAirplaneBtn = new javax.swing.JButton();
        confirmBtn = new javax.swing.JButton();
        serialNoTxtField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nameTxtField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        modelNoTxtField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        entertainmentCheckBox = new javax.swing.JCheckBox();
        wifiCheckBox = new javax.swing.JCheckBox();
        updateAirplane = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        searchAirplaneTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAirplaneTxtFieldActionPerformed(evt);
            }
        });

        searchBtn.setText("Search by Name");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        airplaneTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial Number", "Name", "Model Number", "Entertainment", "WiFi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(airplaneTbl);
        if (airplaneTbl.getColumnModel().getColumnCount() > 0) {
            airplaneTbl.getColumnModel().getColumn(0).setResizable(false);
            airplaneTbl.getColumnModel().getColumn(1).setResizable(false);
            airplaneTbl.getColumnModel().getColumn(2).setResizable(false);
            airplaneTbl.getColumnModel().getColumn(3).setResizable(false);
            airplaneTbl.getColumnModel().getColumn(4).setResizable(false);
        }

        viewAirplaneBtn.setText("View Flights");
        viewAirplaneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAirplaneBtnActionPerformed(evt);
            }
        });

        deleteAirplaneBtn.setText("Delete Airplane");
        deleteAirplaneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAirplaneBtnActionPerformed(evt);
            }
        });

        newAirplaneBtn.setText("New Airplane");
        newAirplaneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAirplaneBtnActionPerformed(evt);
            }
        });

        confirmBtn.setText("Confirm");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Serial Number:");

        jLabel2.setText("Name:");

        jLabel3.setText("Model:");

        jLabel4.setText("Entertainment:");

        jLabel5.setText("WiFi:");

        updateAirplane.setText("Update Airplane");
        updateAirplane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAirplaneActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("FLEET DIRECTORY");
        jLabel6.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(150, 150, 150)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)))
                                    .addComponent(searchBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchAirplaneTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(modelNoTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(nameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel5)
                                            .addGap(18, 18, 18)
                                            .addComponent(wifiCheckBox))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(serialNoTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(entertainmentCheckBox)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(viewAirplaneBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(updateAirplane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(newAirplaneBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteAirplaneBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(386, 386, 386)
                        .addComponent(confirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newAirplaneBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateAirplane)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteAirplaneBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewAirplaneBtn)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBtn)
                    .addComponent(searchAirplaneTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(entertainmentCheckBox)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(serialNoTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(nameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(wifiCheckBox)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(modelNoTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addComponent(confirmBtn)
                .addContainerGap(100, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void enableFields(boolean bool) {
        serialNoTxtField.setEnabled(bool);
        nameTxtField.setEnabled(bool);
        modelNoTxtField.setEnabled(bool);
        entertainmentCheckBox.setEnabled(bool);
        wifiCheckBox.setEnabled(bool);
        confirmBtn.setEnabled(bool);
    }

    public void clearFields() {
        serialNoTxtField.setText("");
        nameTxtField.setText("");
        modelNoTxtField.setText("");
        entertainmentCheckBox.setSelected(false);
        wifiCheckBox.setSelected(false);
    }

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        displayPanel.remove(this);
        CardLayout layout = (CardLayout) displayPanel.getLayout();
        Component[] comps = displayPanel.getComponents();
        for (Component comp : comps) {
            if (comp instanceof ManageAirliners) {
                ManageAirliners ma = (ManageAirliners) comp;
                ma.populateTable();
            }
        }
        layout.previous(displayPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void deleteAirplaneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAirplaneBtnActionPerformed
        // TODO add your handling code here:
        enableFields(false);
        clearFields();
        int selectedRow = airplaneTbl.getSelectedRow();
        if (selectedRow >= 0) {
            Airplane af = (Airplane) airplaneTbl.getValueAt(selectedRow, 0);
            airlineDirectory.deleteAirplane(af);
            populateTable();
            JOptionPane.showMessageDialog(null, "Airplane deleted from airliner");
        } else {
            JOptionPane.showMessageDialog(null, "Please select an airplane to delete");
        }
    }//GEN-LAST:event_deleteAirplaneBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        enableFields(false);
        clearFields();
        String searchTerm = searchAirplaneTxtField.getText();
        if (searchTerm == null || searchTerm.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter an airplane name to search");
            populateTable();
        } else {
            ArrayList<Airplane> found = airlineDirectory.searchAirplane(searchTerm);
            if (found == null) {
                JOptionPane.showMessageDialog(null, "No airplane found with provided name");
            } else {
                DefaultTableModel dtm = (DefaultTableModel) airplaneTbl.getModel();
                dtm.setRowCount(0);

                for (Airplane e : found) {
                    Object row[] = new Object[5];
                    row[0] = e;
                    row[1] = e.getName();
                    row[2] = e.getModel();
                    row[3] = e.isHasEntertainment() ? "Yes" : "No";
                    row[4] = e.isHasWifi() ? "Yes" : "No";
                    dtm.addRow(row);
                }
            }
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBtnActionPerformed
        // TODO add your handling code here:
        try {
            Integer.parseInt(serialNoTxtField.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter valid Serial Number");
            return;
        }
        String name = nameTxtField.getText();
        if (name == null || name.equals("") || !isValidString(name)) {
            JOptionPane.showMessageDialog(null, "Please enter valid name");
            return;
        }
        String model = modelNoTxtField.getText();
        if (model == null || model.equals("") || !isValidString(model)) {
            JOptionPane.showMessageDialog(null, "Please enter valid model");
            return;
        }
        if (name == null || name.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter name");
            return;
        }
        boolean entertainment = entertainmentCheckBox.isSelected();
        boolean wifi = wifiCheckBox.isSelected();

        if (mode == "new") {
            for (Airplane e : airlineDirectory.getAirplaneDirectory()) {
                if (e.getSerialNo() == Integer.parseInt(serialNoTxtField.getText())) {
                    JOptionPane.showMessageDialog(null, "Airplane with provided serial number already exists");
                    return;
                }
            }
//            Airplane airplane = new Airplane(Integer.parseInt(serialNoTxtField.getText()), name, model, entertainment, wifi);
//            airlineDirectory.getAirplaneDirectory().add(airplane);
            Airplane airplane = airlineDirectory.addAirplane();
            airplane.setSerialNo(Integer.parseInt(serialNoTxtField.getText()));
            airplane.setName(name);
            airplane.setModelNo(model);
            airplane.setHasEntertainment(entertainment);
            airplane.setHasWifi(wifi);
            JOptionPane.showMessageDialog(null, "Airplane added to fleet");
        } else {
            updatedInfo.setSerialNo(Integer.parseInt(serialNoTxtField.getText()));
            updatedInfo.setName(name);
            updatedInfo.setModelNo(model);
            updatedInfo.setHasEntertainment(entertainment);
            updatedInfo.setHasWifi(wifi);
            JOptionPane.showMessageDialog(null, "Airplane information updated in directory");
        }
        populateTable();
        enableFields(false);
        clearFields();
    }//GEN-LAST:event_confirmBtnActionPerformed

    private void newAirplaneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAirplaneBtnActionPerformed
        // TODO add your handling code here:
        enableFields(true);
        clearFields();
        mode = "new";
    }//GEN-LAST:event_newAirplaneBtnActionPerformed

    private void viewAirplaneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAirplaneBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = airplaneTbl.getSelectedRow();
        if (selectedRow >= 0) {
            System.out.println("Interface.ViewAirliner.viewAirplaneBtnActionPerformed()");
            Airplane af = (Airplane) airplaneTbl.getValueAt(selectedRow, 0);
            ViewAirplane viewAirplane = new ViewAirplane(af, displayPanel);
            CardLayout layout = (CardLayout) displayPanel.getLayout();
            displayPanel.add("viewAirplane", viewAirplane);
            layout.next(displayPanel);
        } else {
            JOptionPane.showMessageDialog(null, "Please select an airplane to view");
        }
    }//GEN-LAST:event_viewAirplaneBtnActionPerformed

    private void updateAirplaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAirplaneActionPerformed
        // TODO add your handling code here:
        int selectedRow = airplaneTbl.getSelectedRow();
        if (selectedRow >= 0) {
            mode = "update";
            Airplane airplane = (Airplane) airplaneTbl.getValueAt(selectedRow, 0);
            serialNoTxtField.setText(airplane.getSerialNo() + "");
            nameTxtField.setText(airplane.getName() + "");
            modelNoTxtField.setText(airplane.getModel() + "");
            entertainmentCheckBox.setSelected(airplane.isHasEntertainment());
            wifiCheckBox.setSelected(airplane.isHasWifi());
            enableFields(true);
            updatedInfo = airplane;
        } else {
            enableFields(false);
            clearFields();
            JOptionPane.showMessageDialog(null, "Please select an airplane to update");
        }
    }//GEN-LAST:event_updateAirplaneActionPerformed

    private void searchAirplaneTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchAirplaneTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchAirplaneTxtFieldActionPerformed

    public boolean isValidString(String str) {
        Pattern p = Pattern.compile("^[a-zA-Z0-9]+$");
        Matcher m = p.matcher(str);
        return m.matches();
    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) airplaneTbl.getModel();
        dtm.setRowCount(0);
        ArrayList<Airplane> temp = airlineDirectory.getAirplaneDirectory();
        airlineDirectory.setNoOfAirplanes(temp.size());
        for (Airplane e : airlineDirectory.getAirplaneDirectory()) {

            Object row[] = new Object[5];
            row[0] = e;
            row[1] = e.getName();
            row[2] = e.getModel();
            row[3] = e.isHasEntertainment() ? "Yes" : "No";
            row[4] = e.isHasWifi() ? "Yes" : "No";
            dtm.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable airplaneTbl;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JButton deleteAirplaneBtn;
    private javax.swing.JCheckBox entertainmentCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField modelNoTxtField;
    private javax.swing.JTextField nameTxtField;
    private javax.swing.JButton newAirplaneBtn;
    private javax.swing.JTextField searchAirplaneTxtField;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField serialNoTxtField;
    private javax.swing.JButton updateAirplane;
    private javax.swing.JButton viewAirplaneBtn;
    private javax.swing.JCheckBox wifiCheckBox;
    // End of variables declaration//GEN-END:variables
}
