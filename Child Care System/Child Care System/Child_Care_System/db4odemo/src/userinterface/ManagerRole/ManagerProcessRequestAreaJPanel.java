/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ManagerRole;

import Business.EcoSystem;
import Business.Employee.Donor;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DonorOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import static Business.Organization.Organization.Type.Donor;
import static Business.Role.Role.RoleType.Donor;
import Business.UserAccount.UserAccount;
import Business.Validation.EmailTextSending;
import Business.Validation.StringValidation;
import Business.WorkQueue.DonorTestWorkRequest;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.ManagerWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Date;
import javax.swing.InputVerifier;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author niramaykelkar
 */
public class ManagerProcessRequestAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private ManagerWorkRequest request;
    private EcoSystem ecoSystem;
    private Organization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    /**
     * Creates new form ManagerProcessRequestAreaJPanel
     */
    public ManagerProcessRequestAreaJPanel(JPanel userProcessContainer, ManagerWorkRequest request, EcoSystem ecoSystem,Organization organization, Enterprise enterprise, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.request = request;
        this.ecoSystem = ecoSystem;
        this.organization=organization;
        this.enterprise=enterprise;
        this.userAccount=userAccount;
        resultComboBox.removeAllItems();
        resultComboBox.addItem(ManagerWorkRequest.REQUEST_APPROVED);
        resultComboBox.addItem(ManagerWorkRequest.REQUEST_REJECT);
        populateComboBox();
        inputVerifier();
    }
    
    public void inputVerifier()
    {
        InputVerifier strValidation = new StringValidation();
        commentsJTextField.setInputVerifier(strValidation);
    }
    private void populateComboBox(){
        
        networkComboBox.removeAllItems();
        if(ecoSystem.getNetworkList().isEmpty())
        {
        JOptionPane.showMessageDialog(null, "There is no Network at present");  
         return;        
        }
        networkComboBox.addItem("Please assign a Network");
        for(Network network : ecoSystem.getNetworkList())
        {
             networkComboBox.addItem(network);
        }
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        networkComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        submitJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        resultComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        commentsJTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setLayout(null);

        networkComboBox.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        networkComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        networkComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkComboBoxActionPerformed(evt);
            }
        });
        add(networkComboBox);
        networkComboBox.setBounds(460, 240, 163, 27);

        jLabel3.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel3.setText("Assign Location");
        add(jLabel3);
        jLabel3.setBounds(230, 240, 170, 21);

        backJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Double Left_100px.png"))); // NOI18N
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton);
        backJButton.setBounds(60, 50, 60, 40);

        submitJButton.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        submitJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/button_submit.png"))); // NOI18N
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });
        add(submitJButton);
        submitJButton.setBounds(360, 300, 110, 40);

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel1.setText("Request Result");
        add(jLabel1);
        jLabel1.setBounds(230, 160, 116, 20);

        jLabel7.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel7.setText("Work Request");
        add(jLabel7);
        jLabel7.setBounds(380, 50, 300, 28);

        resultComboBox.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        resultComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(resultComboBox);
        resultComboBox.setBounds(460, 160, 163, 27);

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel2.setText("Comments");
        add(jLabel2);
        jLabel2.setBounds(230, 200, 81, 21);

        commentsJTextField.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        add(commentsJTextField);
        commentsJTextField.setBounds(460, 200, 163, 31);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/blue-and-silver-stetoscope-40568.jpg"))); // NOI18N
        add(jLabel4);
        jLabel4.setBounds(0, 0, 1620, 1080);
    }// </editor-fold>//GEN-END:initComponents

    private void networkComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkComboBoxActionPerformed

    }//GEN-LAST:event_networkComboBoxActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        Component[] compArr = userProcessContainer.getComponents();
        Component component = compArr[compArr.length - 1];
        ManagerWorkAreaJPanel managerWorkAreaJPanel = (ManagerWorkAreaJPanel) component;
        managerWorkAreaJPanel.populateTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        if(resultComboBox.getSelectedIndex()<0 || commentsJTextField.getText().trim().isEmpty() ||
            networkComboBox.getSelectedIndex()<1)
        {
            JOptionPane.showMessageDialog(null, "Enter data in every fields", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Network net = (Network)networkComboBox.getSelectedItem();
        if((request.getSender().getRole().toString()).equalsIgnoreCase("Business.Role.ApplicantRole"))
        {
            //Donor donor = (Donor)request.getSender().getEmployee();
            for (Network N : ecoSystem.getNetworkList()) {
            
            
                for ( Enterprise e   : N.getEnterpriseDirectory().getEnterpriseList()) {
                    
                        e.setEnterpriseType(Enterprise.EnterpriseType.NonProfit);    
                        if (e.getEnterpriseType().getValue().equals("NonProfit"))
                    {
            DonorTestWorkRequest request = new DonorTestWorkRequest();
        request.setMessage("Please Donate Organs");
        request.setSender(userAccount);
        request.setStatus("Sent");
        
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof DonorOrganization){
                org = organization;
                break;
            }
        }
        
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request);
            userAccount.getWorkQueue().getWorkRequestList().add(request);
        }
                    }
                }
            }
        }
        request.setStatus(ManagerWorkRequest.REQUEST_COMPLETED);
        request.setResolveDate(new Date());
        request.setTestResult((String)resultComboBox.getSelectedItem());
        request.setComments(commentsJTextField.getText());
        request.getSender().setNetwork(net);
        if(request.getTestResult().equals(ManagerWorkRequest.REQUEST_APPROVED))
        {
            request.getSender().setEnabled(true);
            String emailId = request.getSender().getEmployee().getEmailId();
            String userName = request.getSender().getUsername();
            String password = request.getSender().getPassword();
            StringBuilder emailText = new StringBuilder();
            emailText.append("Acount created successfully. Below are your details");
            emailText.append(System.lineSeparator());
            emailText.append("username : ".concat(userName));
            emailText.append(System.lineSeparator());
            emailText.append("password : ".concat(password));
            emailText.append(System.lineSeparator());
            emailText.append(System.lineSeparator());
            emailText.append("ChildHelpCare");
           // boolean emailSent = EmailTextSending.sendEmail(emailText.toString(),emailId,userName, password);
          //  if(!emailSent)
          //  {
           //     JOptionPane.showMessageDialog(null, "There was some issue sending the mail","warning", JOptionPane.WARNING_MESSAGE);
           //     return;
          //  }
        }
        JOptionPane.showMessageDialog(null, "Request processed successfully", "success", JOptionPane.PLAIN_MESSAGE);
        commentsJTextField.setText("");
    }//GEN-LAST:event_submitJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTextField commentsJTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox networkComboBox;
    private javax.swing.JComboBox resultComboBox;
    private javax.swing.JButton submitJButton;
    // End of variables declaration//GEN-END:variables
}
